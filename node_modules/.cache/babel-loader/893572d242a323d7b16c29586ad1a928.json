{"ast":null,"code":"var _jsxFileName = \"/Users/ethanwinter/Desktop/dapp/dappMiner/minerdapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Alert } from 'react-bootstrap';\nimport Main from './main';\nimport { ethers } from \"ethers\";\nimport { useState } from \"react\";\nimport MinerContract from \"./artifacts/contracts/MinerContract.sol/MinerContract.json\";\nimport './App.css';\nimport { TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END } from 'hardhat/builtin-tasks/task-names';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x1BbE23f1fE058769Af9132AeEf021905fdBDdE6f\";\n\nfunction App() {\n  _s();\n\n  //property variables\n  const [message, setEggs] = useState(\"\");\n  const [currentMiners, setMiners] = useState(\"\");\n  const [userAddress, setAddress] = useState(\"\"); //request access to metamask accounts\n\n  async function requestAccount() {\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n  } //helper functions\n  //fetch current values stored in contract\n\n\n  async function fetchMiners() {\n    if (typeof window.ethereum !== \"undefined\") {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, MinerContract.abi, provider);\n      const signer = provider.getSigner();\n      const signerAddress = await signer.getAddress();\n\n      try {\n        const data = await contract.getMyMiners(signerAddress);\n        const newData = Number(data);\n        console.log(\"data: \", newData);\n        setMiners(newData);\n        setAddress(signerAddress);\n      } catch (error) {\n        console.log('Error: ', error);\n      }\n    }\n  }\n\n  async function buyMiners() {\n    if (message !== \"\") {\n      if (typeof window.ethereum !== \"undefined\") {\n        await requestAccount();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const signerAddress = signer.getAddress();\n        const contract = new ethers.Contract(contractAddress, MinerContract.abi, signer);\n        const newAmount = ethers.utils.parseUnits(message, 18);\n        const transaction = await contract.buyEggs(signerAddress, newAmount);\n        setEggs(\"\"); //waits for transaction to finish and logs new minertotal\n\n        await transaction.wait();\n        fetchMiners();\n        console.log(transaction);\n        /*print total miners\n        const miners = await contract.getMyMiners(signerAddress);\n        const newMiners = Number(miners);\n        console.log(newMiners);\n        */\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          minHeight: '100vm',\n          maxWidth: '600px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"l82T/qMByjMHVRtLKETjCz+7eks=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Button","Alert","Main","ethers","useState","MinerContract","TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END","contractAddress","App","message","setEggs","currentMiners","setMiners","userAddress","setAddress","requestAccount","window","ethereum","request","method","fetchMiners","provider","providers","Web3Provider","contract","Contract","abi","signer","getSigner","signerAddress","getAddress","data","getMyMiners","newData","Number","console","log","error","buyMiners","newAmount","utils","parseUnits","transaction","buyEggs","wait","minHeight","maxWidth"],"sources":["/Users/ethanwinter/Desktop/dapp/dappMiner/minerdapp/src/App.js"],"sourcesContent":["import { Button, Alert } from 'react-bootstrap';\nimport Main from './main';\nimport {ethers} from \"ethers\";\nimport {useState} from \"react\";\nimport MinerContract from \"./artifacts/contracts/MinerContract.sol/MinerContract.json\";\nimport './App.css';\nimport { TASK_COMPILE_SOLIDITY_LOG_RUN_COMPILER_END } from 'hardhat/builtin-tasks/task-names';\n\nconst contractAddress = \"0x1BbE23f1fE058769Af9132AeEf021905fdBDdE6f\";\n\nfunction App() {\n\n  //property variables\n  const [message, setEggs] = useState(\"\");\n  const [currentMiners, setMiners] = useState(\"\");\n  const [userAddress, setAddress] = useState(\"\");\n\n\n\n  //request access to metamask accounts\n  async function requestAccount(){\n    await window.ethereum.request({method: 'eth_requestAccounts'});\n  }\n\n  //helper functions\n\n  //fetch current values stored in contract\n\n  async function fetchMiners() {\n    if (typeof window.ethereum !== \"undefined\"){\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(contractAddress, MinerContract.abi, provider)\n      const signer = provider.getSigner();\n      const signerAddress = await signer.getAddress();\n\n      try {\n        const data = await contract.getMyMiners(signerAddress);\n        const newData = Number(data);\n        console.log(\"data: \", newData);\n        setMiners(newData);\n        setAddress(signerAddress);\n      } catch (error) {\n        console.log('Error: ', error);\n      }\n    }\n  }\n\n\n  async function buyMiners(){\n    if (message !== \"\"){\n      if (typeof window.ethereum !== \"undefined\"){\n        await requestAccount();\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const signerAddress = signer.getAddress();\n\n        const contract = new ethers.Contract(contractAddress, MinerContract.abi, signer);\n        const newAmount = ethers.utils.parseUnits(message, 18);\n        const transaction = await contract.buyEggs(signerAddress, newAmount);\n\n        setEggs(\"\");\n\n        //waits for transaction to finish and logs new minertotal\n\n        await transaction.wait();\n        fetchMiners();\n        console.log(transaction);\n        /*print total miners\n        const miners = await contract.getMyMiners(signerAddress);\n        const newMiners = Number(miners);\n        console.log(newMiners);\n        */\n      }\n    }\n  }\n\n  return(\n    <div className='container-fluid mt-5'>\n      <div className= 'row'>\n        <main role='main' className= 'col-lg-12 ml-auto mr-auto' style={{minHeight: '100vm', maxWidth:'600px'}}>\n          <div>\n            <Main/>\n          </div>\n        </main>\n      </div>\n\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}